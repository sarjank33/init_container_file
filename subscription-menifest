apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-subscriptions-ms
  namespace: {{.Values.namespace}}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: core-subscriptions-ms
  replicas: {{.Values.replicas}}
  template: # create pods using pod definition in this template
    metadata:
      namespace: {{.Values.namespace}}
      labels:
        app: core-subscriptions-ms
    spec:
      # INIT CONTAINER SECTION START
      initContainers:
        - name: run-migration
          image: {{.Values.core_subscriptions_ms.image}}
          command:
            - sh
            - -c
            - |
              echo "üöÄ Smart migration check for core-subscriptions-ms..."
              echo "Version: {{.Values.core_subscriptions_ms.version}}"
              
              # Check current migration status using the correct script
              echo "üîç Checking migration status..."
              MIGRATION_OUTPUT=$(npm run subscriptions:migration:show 2>&1)
              
              echo "üìä Current migration status:"
              echo "$MIGRATION_OUTPUT"
              
              # Check if there are pending migrations
              # TypeORM migration:show shows:
              # [X] AppliedMigration  
              # [ ] PendingMigration
              
              if echo "$MIGRATION_OUTPUT" | grep -q "\[ \]"; then
                echo "üÜï Pending migrations detected - running migration..."
                
                # Run migration
                npm run subscriptions:migration:up || {
                  echo "‚ùå Migration failed!"
                  exit 1
                }
                
                echo "‚úÖ Migration completed! Final status:"
                npm run subscriptions:migration:show || echo "Could not verify status"
                
              else
                echo "‚úÖ No pending migrations found"
                echo "üîÑ Skipping migration - database is current"
              fi
              
              echo "üéâ Migration process completed!"
          env:
            - name: NODE_OPTIONS
              value: "--max-old-space-size=2048"
          envFrom:
            - configMapRef:
                name: common-configmap
            - configMapRef:
                name: core-subscriptions-ms-configmap
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "3Gi"
              cpu: "1500m"
      #  END OF NEW INIT CONTAINER SECTION
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        # whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: core-subscriptions-ms
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: core-subscriptions-ms
      containers:
        - name: core-subscriptions-ms
          env:
            - name: "AWS_TEST_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  key:  AWS_TEST_ACCESS_KEY_ID
                  name: secrets
            - name: "AWS_TEST_SECRET_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  key:  AWS_TEST_SECRET_ACCESS_KEY
                  name: secrets
            - name: "PREFIX"
              value: "core-events"
          envFrom:
            - configMapRef:
                name: common-configmap
            - configMapRef:
                name: core-subscriptions-ms-configmap
          image: {{.Values.core_subscriptions_ms.image}}
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
          # volumeMounts:
          #   - name: efs-store
          #     mountPath: /tmp/data
          resources:
            requests:
              memory: "1Gi"
              cpu: "250m"
            limits:
              memory: "1200Mi"
              cpu: "300m"           
          ## livenessProbe:
          #   httpGet:
          #     path: /subscriptions/healthcheck
          #     port: 80
          #   initialDelaySeconds: 30
          #   timeoutSeconds: 10
          #   periodSeconds: 30
          #   failureThreshold: 6
          # readinessProbe:
          #   httpGet:
          #     path: /subscriptions/healthcheck
          #     port: 80
          #   initialDelaySeconds: 15
          #   timeoutSeconds: 5
          #   periodSeconds: 15
          #   failureThreshold: 6
      # volumes:
      #   - name: efs-store
      #     persistentVolumeClaim:
      #       claimName: efs-claim
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{.Values.namespace}}
  name: core-subscriptions-ms
spec:
  selector:
    app: core-subscriptions-ms
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
  type: NodePort
---              
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: core-subscriptions-ms-hpa
  namespace: {{.Values.namespace}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: core-subscriptions-ms
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: core-subscriptions-ms-pdb
  namespace: {{.Values.namespace}}
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: core-subscriptions-ms
